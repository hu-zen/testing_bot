//=============================Motor Controll with Smooth Deceleration (Stable Base)===============================
// Versi 4.0 - Berdasarkan kode asli yang stabil, dengan penambahan deselerasi non-blocking HANYA saat berhenti.
//==============================================================================================================

#include <Servo.h>
#include <HB25MotorControl.h>
#include <ros.h>
#include <geometry_msgs/Twist.h>

const byte controlPinL = 6;
const byte controlPinR = 7;

HB25MotorControl motorControlL(controlPinL);
HB25MotorControl motorControlR(controlPinR);

ros::NodeHandle nh;

// --- Variabel untuk kontrol kecepatan ---
int target_left_speed = 0;   // Kecepatan target dari ROS
int target_right_speed = 0;
int current_left_speed = 0;  // Kecepatan aktual yang dikirim ke motor
int current_right_speed = 0;

// --- Variabel untuk timing deselerasi non-blocking ---
unsigned long lastStopTime = 0;
const int stop_interval = 10; // Seberapa sering kecepatan diturunkan saat berhenti

// --- Callback Function ---
// Hanya menyimpan kecepatan target dari ROS
void twistCallback(const geometry_msgs::Twist& twist_msg) {
  int linear_speed = (int)(twist_msg.linear.x * 300);
  int angular_speed = (int)(twist_msg.angular.z * 300);
  
  target_left_speed = linear_speed - angular_speed;
  target_right_speed = linear_speed + angular_speed;

  target_left_speed = constrain(target_left_speed, -500, 500);
  target_right_speed = constrain(target_right_speed, -500, 500);
}

ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", &twistCallback);

void setup() {
  nh.getHardware()->setBaud(115200);
  nh.initNode();
  nh.subscribe(sub);

  motorControlL.begin();
  motorControlR.begin();
}

void loop() {
  nh.spinOnce();

  // Jika target kecepatan BUKAN 0, langsung eksekusi seperti program asli.
  // Ini menjaga responsivitas joystick saat bergerak.
  if (target_left_speed != 0 || target_right_speed != 0) {
    motorControlL.moveAtSpeed(target_left_speed);
    motorControlR.moveAtSpeed(target_right_speed);
    // Simpan kecepatan saat ini
    current_left_speed = target_left_speed;
    current_right_speed = target_right_speed;
  } else {
    // Jika target kecepatan adalah 0 (berhenti), jalankan logika deselerasi
    unsigned long currentTime = millis();
    if (currentTime - lastStopTime >= stop_interval) {
      lastStopTime = currentTime;
      
      // Turunkan kecepatan kiri menuju 0
      if (current_left_speed > 0) current_left_speed--;
      if (current_left_speed < 0) current_left_speed++;
      
      // Turunkan kecepatan kanan menuju 0
      if (current_right_speed > 0) current_right_speed--;
      if (current_right_speed < 0) current_right_speed++;
      
      motorControlL.moveAtSpeed(current_left_speed);
      motorControlR.moveAtSpeed(current_right_speed);
    }
  }
}
